notifications:
    on_success: never

language: cpp

compiler:
    - clang
    - gcc

env:
    matrix:
        # let the 32 bit build double as a "no runtime" test
        - REBOL=metaeducation/ren-c OS_ID=0.4.4 CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32
        - RUNTIME=rebol REBOL=metaeducation/ren-c OS_ID=0.4.40
#        - RUNTIME=red CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32

matrix:
    exclude:
        # Don't try 32-bit Clang builds
        - compiler: clang
          env: REBOL=metaeducation/ren-c OS_ID=0.4.4 CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32
        - compiler: clang
          env: RUNTIME=red CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32

before_install:
    # Add PPA for GCC 4.8
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    # Add repository for Clang 3.5
    - sudo bash -c 'echo "deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.5 main" > /etc/apt/sources.list.d/llvm.list'
    - sudo apt-get update

install:
    # NB. Travis CI concats multi-line "scripts" to a single line. Beware!
    #
    # --- RenCpp Prerequisites ---
    #
    # Install GCC 4.8 for building RenCpp, if tests are run with g++
    - if [ "${CXX}" = "g++" ]; then
        sudo apt-get install -y gcc-4.8-multilib g++-4.8-multilib &&
        export CC=gcc-4.8 CXX=g++;
      fi
    - if [ "${CXX}" = "g++" ]; then export CC=gcc-4.8 CXX=g++-4.8; fi
    # Install Clang 3.5 for building RenCpp, if tests are run with clang
    - if [ "${CXX}" = "clang++" ]; then
        sudo apt-get install -y --allow-unauthenticated clang-3.5 &&
        export CC=clang-3.5 CXX=clang++-3.5;
      fi
    #
    # --- Rebol Prerequisites ---
    #
    # Set up 32-bit multiarch for building Rebol
    - if [ "$(uname -m)" = "x86_64" ]; then
        sudo apt-get install -y gcc-multilib g++-multilib libc6:i386;
      fi
    # Set up our runtimes
    - mkdir runtimes/
    # Fetch a Rebol binary needed for building Rebol, needed for both the
    # Rebol runtime and also currently for "no runtime" (to implement the
    # data structure, basically stripped down Rebol...)
    - if [[ (-z ${RUNTIME+x}) || ("${RUNTIME}" = "rebol") ]]; then
        wget http://www.rebol.com/r3/downloads/r3-a111-4-2.tar.gz &&
        tar xvzf r3-a111-4-2.tar.gz;
      fi
    # Fetch and build Rebol
    - if [[ (-z ${RUNTIME+x}) || ("${RUNTIME}" = "rebol") ]]; then
        git clone https://github.com/${REBOL} runtimes/rebol &&
        cp r3 runtimes/rebol/make/r3-make &&
        make -C runtimes/rebol/make/ -f makefile.boot OS_ID=${OS_ID};
      fi
    # Make sure valgrind is installed
    - sudo apt-get install valgrind
    # On the 32-bit runs, valgrind insists on this to work:
    - sudo apt-get install libc6-dbg:i386


before_script:
    # Have CMake generate the makefiles
    - mkdir build/
    - pushd build/
    - if [ "${RUNTIME}" = "rebol" ]; then cmake -DRUNTIME=${RUNTIME} -DRUNTIME_PATH=$(pwd)/../runtimes/${RUNTIME} ..; fi
    - if [ "${RUNTIME}" = "red" ]; then cmake -DRUNTIME=${RUNTIME} ..; fi
    # We now support not setting a runtime, as it's a possible "default" it
    # is simply unset and not "none".  The +x trick is how to check for unset
    # http://stackoverflow.com/a/13864829/211160
    - if [ -z ${RUNTIME+x} ]; then cmake -URUNTIME -DRUNTIME_PATH=$(pwd)/../runtimes/rebol ..; fi
    - popd

script:
    # Build RenCpp
    - make -C build/

    # Run RenCpp all-in-one test runner.  Only run tests tagged with the
    # runtime in effect (which may be nothing).  For list of Catch
    # command-line parameters, see:
    #
    # https://github.com/philsquared/Catch/blob/master/docs/command-line.md
    #
    # Also, run it under valgrind.  With --error-exitcode option, valgrind
    # will return that number instead of what the child process returned
    # if there are errors found.

    - valgrind --leak-check=full build/tests/test-rencpp "[${RUNTIME}]" "[isolated]"

    - valgrind --error-exitcode=222 --leak-check=full build/tests/test-rencpp "[${RUNTIME}]" "~[isolated]"
